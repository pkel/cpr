<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Methodology on</title><link>https://pkel.github.io/cpr/docs/methods/</link><description>Recent content in Methodology on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://pkel.github.io/cpr/docs/methods/index.xml" rel="self" type="application/rss+xml"/><item><title>Virtual Environment</title><link>https://pkel.github.io/cpr/docs/methods/virtual-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pkel.github.io/cpr/docs/methods/virtual-environment/</guid><description>CPR&amp;rsquo;s core component is a network simulation engine for proof-of-work protocols. The engine takes a protocol specification and a network topology as input, then simulates the execution of the protocol in the network over time. In this document we will focus on the theoretical aspects of this virtual environment. We will describe what we simulate and why but not how. In other words, we will define a model for virtual protocol execution.</description></item><item><title>Protocol Specification</title><link>https://pkel.github.io/cpr/docs/methods/protocol-specification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pkel.github.io/cpr/docs/methods/protocol-specification/</guid><description>Protocol designers write protocol specifications for consumption by analysts and engineers. The engineer reads the specification and implements it. The analysts reads the specification and tries to find attacks or rule them out. Both analysts and engineers want to interpret the specification as intended by the designer. Practically minded attackers will attack an implementation, not the specification.
Depending on the context, we take the role of the designer or the analysts.</description></item><item><title>Simulator</title><link>https://pkel.github.io/cpr/docs/methods/simulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pkel.github.io/cpr/docs/methods/simulator/</guid><description>Having talked about our model for virtual protocol executions and about how we specify protocols, we can proceed with the description of the network simulator. Like before, we use Python as pseudocode to describe important details. The code snippets are optimized for readability not speed. The real simulator is implemented in a compiled language to achieve good performance.
Inputs #
The simulator takes as input the following assumptions about the network and participating nodes.</description></item></channel></rss>